// ----------------------------- Global Error Handling Middleware -----------------------------
// In this example, we demonstrate how to implement global error handling middleware in Express.
// The error handling middleware catches any errors that occur during request processing and sends an appropriate error response to the client.
// This helps in centralizing error handling logic and providing consistent error responses across the application.

// Import required modules
const express = require('express');

// Create Express app
const app = express();

// Middleware to simulate an error
app.get('/simulate-error', (req, res, next) => {
    // Simulate an error by throwing an exception
    throw new Error('This is a simulated error');
});

// Error handling middleware
app.use((err, req, res, next) => {
    // Log the error to the console for debugging
    console.error(err.stack);

    // Send an error response to the client
    res.status(500).send('Internal Server Error');
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


// ----------------------------- Zod Usage -----------------------------
// This example illustrates how to use Zod, a TypeScript-first schema declaration and validation library, in an Express application.
// We define a schema for input validation using Zod and create middleware to validate user input against the schema.
// If the input data does not match the schema, a validation error response is sent to the client.
// This ensures that only valid data is processed further in the application.

const express = require('express');
const { z } = require('zod');

const app = express();

// Define a schema for input validation
const userSchema = z.object({
  username: z.string().min(3).max(20),
  email: z.string().email(),
  age: z.number().int().positive(),
});

// Middleware to validate user input
const validateUserInput = (req, res, next) => {
  try {
    // Validate the request body against the schema
    userSchema.parse(req.body);
    next(); // Move to the next middleware if validation succeeds
  } catch (error) {
    // Return validation errors to the client
    res.status(400).json({ error: error.errors });
  }
};

// Route handler for creating a new user
app.post('/users', validateUserInput, (req, res) => {
  // At this point, req.body has passed validation
  // Process the request further, e.g., save user to database
  res.status(201).json({ message: 'User created successfully' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error' });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});










// ---------------Debouncing---------------------
// Debouncing is a technique used to limit the rate at which a function is executed.
// In this example, we implement debouncing in a React component for handling search input.
// The debounce function delays the execution of an API call triggered by user input, ensuring that the API call is made only after a certain delay (e.g., 300 milliseconds) since the last input change.
// This helps in reducing the number of API requests and improving performance, especially in scenarios where the user is typing quickly.

import React, { useState } from 'react';

const SearchBar = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(false);

  // Function to debounce another function
  const debounce = (func, delay) => {
    let timeoutId;

    return function() {
      const context = this;
      const args = arguments;

      clearTimeout(timeoutId);

      timeoutId = setTimeout(() => {
        func.apply(context, args);
      }, delay);
    };
  };

  // Function to perform API call for search
  const searchApi = async (searchTerm) => {
    try {
      // Start loading
      setLoading(true);

      // Simulate API call (replace with actual API call)
      const response = await fetch(`https://api.example.com/search?q=${searchTerm}`);
      const data = await response.json();

      // Update search results
      setSearchResults(data.results);

      // Stop loading
      setLoading(false);
    } catch (error) {
      console.error('Error:', error);
      // Handle error
      setLoading(false);
    }
  };

  // Debounced search function with a delay of 300 milliseconds
  const debouncedSearch = debounce(searchApi, 300);

  // Event handler for input change
  const handleInputChange = (event) => {
    const searchTerm = event.target.value;
    setSearchTerm(searchTerm);

    // Call the debounced search function
    debouncedSearch(searchTerm);
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Search..."
        value={searchTerm}
        onChange={handleInputChange}
      />
      {loading && <p>Loading...</p>}
      {searchResults.length > 0 && (
        <ul>
          {searchResults.map((result, index) => (
            <li key={index}>{result}</li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default SearchBar;













// ------------------------useMemo---------------------
// useMemo is a hook in React used to memoize the result of a function and recompute it only when its dependencies change.
// In this example, we use useMemo to optimize the calculation of an expensive operation (factorial) in a React component.
// The expensive calculation is memoized based on the count state variable, and it is recomputed only when count changes.
// This improves the performance of the component by avoiding unnecessary recalculations of the expensive operation on every render.

import { useState, useMemo } from "react";
import ReactDOM from "react-dom/client";

const App = () => {
  const [input, setInput] = useState(0);
  const [count, setCount] = useState(0);
  const calculation = useMemo(() => expensiveCalculation(input), [input]);

 return (
    <div>
      <div>
        <input type = input value={input} onChange = (e) => {setInput(e.target.value)} />
        <div>
        <h2>Expensive Calculation</h2>
        {calculation}
       </div>

      </div>
      <hr />
      <div>
        Count: {count}
        <button onClick={()=>{setCount((c) => c + 1)} + </button>
      
      </div>
    </div>
  );
};

const expensiveCalculation = (num) => {
  console.log("Calculating...");
  for (let i = 0; i < 1000000000; i++) {
    num += 1;
  }
  return num;
};

ReactDOM.render(<App />, document.getElementById("root"));









// -------------------------------React.memo------------------------------------
// React.memo is a higher-order component in React used to memoize functional components.
// In this example, we demonstrate how to use React.memo to memoize a Square component in a Board component.
// React.memo ensures that the Square component is re-rendered only when its props change, preventing unnecessary re-renders and optimizing performance.

iimport React, { useState } from 'react';

// Square component receiving static props ...so should not ren-render...powered by React.memo
const Square = React.memo(({ value }) => {
  console.log(`Rendering Square with value: ${value}`);
  return (
    <div style={{ width: '50px', height: '50px', backgroundColor: 'lightblue', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
      {value}
    </div>
  );
});

// Parent component
const Parent = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <button onClick={increment}>Increment Count</button>
      <Square value={"Hello"} />
      <Sibling value={count} />
    </div>
  );
};

// Sibling component
const Sibling = ({ value }) => {
  console.log(`Rendering Sibling with value: ${value}`);
  // This component also receives the dynamic prop ..
  return (
    <div style={{ width: '50px', height: '50px', backgroundColor: 'lightgreen', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
      {value}
    </div>
  );
};

export default Parent;









//--------------------------------useCallback-----------------------------------
// useCallback is a hook that returns a memoized version of the callback function.
// It is useful when passing callbacks to child components to prevent unnecessary re-renders of chil.
// useCallback takes two arguments: the callback function and an array of dependencies.
// It returns a memoized version of the callback that only changes if one of the dependencies has changed.

import React, { useState, useCallback } from "react";
import ReactDOM from "react-dom";

// Todos component definition
const Todos = ({ todos, addTodo }) => {
  console.log("Child component rendered");
  return (
    <>
      <h2>My Todos</h2>
      {todos.map((todo, index) => {
        return <p key={index}>{todo}</p>;
      })}
      <button onClick={addTodo}>Add Todo</button>
    </>
  );
};

// Memoize the Todos component using React.memo
const MemoizedTodos = React.memo(Todos);

// App component definition
const App = () => {
  const [count, setCount] = useState(0);
  const [todos, setTodos] = useState([]);

  // Function to increment count
  const increment = () => {
    setCount((c) => c + 1);
  };

  // Function to add todo, memoized using useCallback
  const addTodo = useCallback(() => {
    setTodos((t) => [...t, "New Todo"]);
  }, [todos]); // Depend on todos to avoid stale closure issue

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>Increment Count</button>
      <hr />
      {/* Render the MemoizedTodos component */}
      <MemoizedTodos todos={todos} addTodo={addTodo} />
    </div>
  );
};

// Render the App component
ReactDOM.render(<App />, document.getElementById("root"));





----------------------------------useRef----------------------------------------
// useRef is commonly used for accessing DOM elements or storing mutable values without causing re-renders.


import React, { useRef, useEffect, useState } from 'react';
import ReactDOM from 'react-dom';

const App = () => {
  // Use useRef to count the number of re-renders
  const renderCount = useRef(0);

  // Use useRef to store a reference to the input element
  const inputRef = useRef(null);

  // Use state to manage a counter
  const [, forceUpdate] = useState();

  // Increment the count on each render
  useEffect(() => {
    renderCount.current++;
  });

  // Function to focus the input element
  const focusInput = () => {
    inputRef.current.focus();
  };

  // Function to force a re-render
  const triggerRerender = () => {
    forceUpdate((prev) => !prev);
  };

  return (
    <div>
      <h2>useRef Hook Examples</h2>
      <p>Number of Re-renders: {renderCount.current}</p>
      <input type="text" ref={inputRef} />
      <button onClick={focusInput}>Focus Input</button>
      <button onClick={triggerRerender}>Force Re-render</button>
    </div>
  );
};

ReactDOM.render(<App />, document.getElementById('root'));






--------------------------------------------------SQL vs NoSQL--------------------------------------------------------------

SQL databases are traditionally used in applications where data integrity, consistency, and complex queries are crucial. This includes financial applications, ERP systems, and applications with well-defined schemas.

NoSQL databases are preferred in scenarios where high scalability, flexibility, and performance are required. This includes web applications dealing with large volumes of data, real-time analytics, IoT applications, and applications with evolving or dynamic schemas.



------------------------------------------------SQL Injection----------------------------------------------------------------------------
•	Definition: SQL injection is a security vulnerability.
•	Attack Vector: Attackers insert malicious SQL statements into input fields or queries.
•	Objective: Manipulate the backend database to gain unauthorized access, leak data, or manipulate data.
•	Causes: Often arises from improper input validation or handling of user input in SQL queries.
•	Consequences: Can lead to unauthorized data access, data leakage, data manipulation, or complete system compromise.
•	Preventive Measures: Use parameterized queries, input validation, and escape special characters to mitigate the risk.





---------------------------------------------------------ORMs-------------------------------------------------------------------------------
•	Simpler Syntax: ORMs offer an easier way to interact with databases by providing a simplified syntax, reducing the need for complex SQL queries.
•	Abstraction over DB Queries: ORMs abstract database queries into high-level programming constructs, making it easier to work with database operations using object-oriented paradigms.
•	Portability: This portability allows developers to switch between different database systems with minimal code changes, providing flexibility and reducing vendor lock-in.
•	Security: ORMs often include security features such as parameterized queries and input sanitization to prevent common vulnerabilities like SQL injection attacks.
•	Automatic Migrations: Automatically synchronize changes in the codebase with the database schema, ensuring consistency and reducing manual intervention.










----------------------------------------------------Serverless Architecture-------------------------------------------------------------
Enables efficient and cost-effective application development and deployment.
•	Cloud computing model
•	Developers focus on code (functions)
•	No server management
•	Cloud provider handles infrastructure


When to use:
•	No worry about Deployments
•	No worry about auto-scaling
•	Very Low traffic & optimization for costs

Benefits:
•	Reduced complexity
•	Auto-scaling
•	Cost effective for low-scale.(Since Pay per request-basis)
•	Faster time to market
•	High availability

Drawbacks:
•	More Expensive at bigger scale
• Cold start problem
•	Limited control over infrastructure




--------------------------------------------------------------Cloudflare-------------------------------------------------------
•	Cloudflare Workers have their own runtime environment.
•	This environment is optimized for Cloudflare's global network, not Node.js.
•	Workers support JavaScript and TypeScript but have their own APIs and limitations.


Why? 
•	Cost-effective: Pay-as-you-go pricing model.
•	Event-driven: Execution based on events like HTTP requests.
•	Edge computing: Runs closer to end-users for faster responses.
•	Isolation and security: Code executes in isolated environments.
•	Scalability: Automatically scales to handle varying workloads.
•	Cost-effective pricing: Pay only for resources consumed.



Hono : A library to mimic Express like functionalities in Cloudflare Worker Environemnt....







-------------------------------------------------------------------------------AWS-----------------------------------------------------------------------------------

• Rent Servers
• Manage Domains
• Upload Media
• Auto scaling
• Create Kubernetes Cluster




----------------------------(Deploying BackEnd)----AWS EC2 Instance SetUp-------------------------------------------------
1. Buy an EC2 instance in AWS Data Center Mumbai:
   - Log in to the AWS Management Console.
   - Navigate to the EC2 dashboard.
   - Click on "Launch Instance" and follow the wizard to choose the desired specifications for your EC2 instance.

2. SSH into the EC2 instance in Git Bash:
   - Use the SSH command to connect to your EC2 instance:
     chmod 400 your-key.pem 
     ssh -i your-key.pem ec2-user@your-instance-public-ip

3. Allow internet connectivity:
   - Edit the /etc/resolv.conf file to add DNS nameservers:
     sudo vi /etc/resolv.conf
     (Press i to enter insert mode, then add the line: nameserver 8.8.8.8)
     (Press Esc, then type :wq and press Enter to save and exit)

4. Clone the backend repository:
   - Use Git to clone the repository:
     git clone repository-url

5. Install Node.js through nvm:
   - Install nvm (Node Version Manager):
     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
     source ~/.bashrc
   - Install Node.js using nvm:
     nvm install node

6. Install dependencies:
   - Navigate to the backend directory:
     cd backend-directory
   - Install dependencies using npm:
     npm install

7. Configure reverse proxy (if required):
   - Install and configure a reverse proxy server such as Nginx:
     sudo yum install nginx    # For Amazon Linux
     sudo apt-get install nginx    # For Ubuntu
   - Create a new configuration file for your application:
     sudo vi /etc/nginx/sites-available/your-app
   - Add configuration settings for reverse proxying:
     server {
         listen 80;
         server_name your-domain.com;

         location / {
             proxy_pass http://localhost:your-app-port;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }
   - Enable the configuration file by creating a symbolic link:
     sudo ln -s /etc/nginx/sites-available/your-app /etc/nginx/sites-enabled/
   - Test the Nginx configuration and restart the Nginx service:
     sudo nginx -t
     sudo service nginx restart

8. Run the Node.js application using pm2:
   - Install pm2 globally if you haven't already:
     npm install -g pm2
   - Start your Node.js application with pm2:
     pm2 start index.js

9. Ensure the Node.js application is running:
   - Check the status of the pm2 process:
     pm2 list
   - Verify that your Node.js application is listed and running.






----------------------------(Deploying FrontEnd)----S3 Bucket and (CDN) CloudFront SetUp-------------------------------------------------
1. Create React Frontend:
   - Develop your frontend application using React or any other frontend framework.

2. Build the Project:
   - Build your project to generate production-ready optimized files.

3. Create a New S3 Bucket and Upload All the Frontend Files:
   - Create a new S3 bucket in the AWS Management Console.
   - Upload all the frontend files and bundles to the S3 bucket.

4. Configure Amazon CloudFront as CDN:
   - Create a CloudFront distribution in the AWS Management Console.
   - Configure the distribution to use the S3 bucket as the origin.
   - Set up proper origin access control settings to restrict access to CloudFront only.

5. Enable Security Protection:
   - Enable security features such as HTTPS (SSL/TLS) encryption for the CloudFront distribution.

6. Set Up Default Root Object:
   - Specify the default root object (e.g., index.html) for the CloudFront distribution.

7. Create the Distribution:
   - Create the CloudFront distribution with the specified settings.

8. Edit the Bucket Policy:
   - Edit the S3 bucket policy to allow access from the CloudFront distribution.
   - Copy and paste the bucket policy (JSON) from the CloudFront distribution settings to the S3 bucket policy.

9. Wait for Deployment:
   - Wait for the CloudFront distribution to be deployed and become fully operational.

10. Edit the Cloudflare Distribution Domain Name:
    - Request an SSL certificate (HTTPS) for your custom domain using AWS Certificate Manager.
    - Choose the certificate after verification through Google Domains.

11. Make the Custom Domain Name Point to the Cloudflare Domain in Google Domains:
    - Update the DNS settings in Google Domains to point your custom domain to the CloudFront distribution domain name.

12. Save the Settings:
    - Save the DNS settings in Google Domains.

13. Set Up Error Responses:
    - Specify the error response settings, such as routing all errors to a custom error page (e.g., index.html) with a status code of 200.

14. Create Invalidation:
    - Create an invalidation to clear the CloudFront cache if required.

15. Test Your Custom Domain URL:
    - Test your custom domain URL to ensure that the frontend application is accessible and functioning correctly.










